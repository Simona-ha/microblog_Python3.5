from app import db
import hashlib
class User(db.Model):
    #字段是被作为 db.Column 类的实例创建的，db.Column 把字段的类型作为参数，
    # 并且还有一些其它可选的参数，比如表明字段是否唯一。
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    posts=db.relationship('Post',backref='author',lazy='dynamic')
    about_me = db.Column(db.String(140))#用户的自我说明
    last_seen = db.Column(db.DateTime)
    def is_authenticated(self):
        return True
    #is_authenticated 方法有一个具有迷惑性的名称。一般而言，这个方法应该只返回 True，除非表示用户的对象因为某些原因不允许被认证。

    def is_active(self):
            return True
    #is_active方法应该返回True，除非是用户是无效的，比如因为他们的账号是被禁止。

    def is_anonymous(self):
            return False
    #is_anonymous 方法应该返回 True，除非是伪造的用户不允许登录系统。

    def get_id(self):
        return str(self.id)  # python 3
     # get_id方法应该返回一个用户唯一的标识符，以 unicode 格式。

    def __repr__(self):
        return '<User %r>' % (self.nickname)
    #__repr__ 方法告诉 Python 如何打印这个类的对象。我们将用它来调试。
    def avatar(self, size):
        md5 = hashlib.md5()
        md5.update(self.email.encode('utf-8'))
        print(md5.hexdigest())
        return 'http://www.gravatar.com/avatar/' + md5.hexdigest() + '?d=mm&s=' + str(size)
        #avatar 返回用户图片的 URL，以像素为单位缩放成要求的尺寸 .hexdigest()显示MD5
        #return ' '+ 'static' + ' ' + 'img' + ' ' + '1.jpg' + ' width= ' + str(size)

    @staticmethod
    def make_unique_nickname(nickname):
        if User.query.filter_by(nickname=nickname).first() == None:
            return nickname
        version = 2
        while True:
            new_nickname = nickname + str(version)
            if User.query.filter_by(nickname=new_nickname).first() == None:
                break
            version += 1
        return new_nickname

class Post(db.Model):
    id=db.Column(db.Integer,primary_key=True)
    body=db.Column(db.String(140))
    timestamp=db.Column(db.DateTime)
    user_id=db.Column(db.Integer,db.ForeignKey('user.id'))
    #在 Post 类中的 user_id 字段初始化成外键，因此 Flask-SQLAlchemy 知道这个字段是连接到用户上。
    def __repr__(self):
        return '<Post %r>' % (self.body)

